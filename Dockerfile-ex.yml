FROM golang:alpine

# RUN apk add --no-cache git

# WORKDIR /go/src/app

# COPY . .

# RUN go get -d -v ./...
# RUN go install -v ./...

# RUN go get -u github.com/joho/godotenv

# RUN go get github.com/githubnemo/CompileDaemon

# ENTRYPOINT CompileDaemon --build="go build server.go" --command=./server

# EXPOSE 8080

# ------------------------

# #build stage
# FROM golang:alpine AS builder
# RUN apk add --no-cache git
# WORKDIR /go/src/app
# COPY . .
# RUN go get -d -v ./...
# RUN go build -o /go/bin/app -v ./...

# #final stage
# FROM alpine:latest
# RUN apk --no-cache add ca-certificates
# COPY --from=builder /go/bin/app ./app
# ENTRYPOINT /app
# LABEL Name=bookfrontendapifinal Version=0.0.1
# EXPOSE 8080


# # Start from golang base image
# FROM golang:alpine as builder

# # ENV GO111MODULE=on

# # Add Maintainer info
# LABEL maintainer="satoshi123"

# # Install git.
# # Git is required for fetching the dependencies.
# RUN apk update && apk add --no-cache git

# # Set the current working directory inside the container 
# WORKDIR /go/src/app

# # Copy go mod and sum files 
# COPY go.mod go.sum ./

# # Download all dependencies. Dependencies will be cached if the go.mod and the go.sum files are not changed 
# RUN go mod download 

# # Copy the source from the current directory to the working Directory inside the container 
# COPY . .

# # Build the Go app
# RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server .

# # Start a new stage from scratch
# FROM alpine:latest
# RUN apk --no-cache add ca-certificates

# WORKDIR /root/

# # Copy the Pre-built binary file from the previous stage. Observe we also copied the .env file
# COPY --from=builder /go/src/app/server .
# # COPY --from=builder /go/src/app/.env .       

# # Expose port 8080 to the outside world
# EXPOSE 8080

# #Command to run the executable
# CMD ["./server"]